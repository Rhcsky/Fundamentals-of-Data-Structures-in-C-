{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"모두를 위한 RL강좌 4, Q-learning","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPo5VVifNYRiXsHcISJ7+n6"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"FVknb423B5d4","colab_type":"text"},"source":["# Exploit VS Exploration\n","\n","Action을 정하는 것에 대한 알고리즘.\n","기본적인 개념은 랜덤하게 가는 것과 알고있는 길로 가는것의 비율을 정하는 것.\n","\n","-----\n","\n","## E-greedy\n","처음부터 끝까지 같은 비율로 랜덤을 정한다.\n","```python\n","e = 0.1\n","for i in range(1000):\n","  if rand<e:\n","    a = random\n","  else:\n","    a = argmax(Q(s,a))\n","```\n","\n","## decaying E-greedy\n","후반에 갈 수록 랜덤하게 가는 비율을 점차 줄이는 것.\n","```python\n","for i in range(1000)\n","  e = 0.1/(i+1)\n","  if random(1) < e:\n","    a = random\n","  else:\n","    a = argmax(Q(s,a))\n","```\n","\n","## add random noise\n","기존의 값에 랜덤한 수를 넣어서 길을 찾아가는 것.\n","```python\n","a = argmax(Q(s,a) + random_values)\n","```\n","\n","## decaying add random noise\n","```python\n","for i in range(1000):\n","  a = argmax(Q(s,a) + random_values/(i+1))\n","```\n"]},{"cell_type":"markdown","metadata":{"id":"7jhzWtecD4Xo","colab_type":"text"},"source":["# Discounted Reward\n","\n","다음 상태에서 받을 값을 discount 해버리는 것\n","```cpp\n","Q(s,a) = r + Q(s',a') * discount\n","```\n"]},{"cell_type":"markdown","metadata":{"id":"kwZxA6RNE-Di","colab_type":"text"},"source":["# Conclusion\n","\n","* When you select an `Action` a and execute it, you can use `Exploit & Exploration` algorithm.\n","* When you update the table entry for `Q(s,a)`, you can use `Discounted Reward` algorithm.\n","$$\\hat{Q}(s,a) = r + \\gamma max\\hat{Q}(s',a')$$\n"]},{"cell_type":"markdown","metadata":{"id":"wvtAv-JrJtqP","colab_type":"text"},"source":["# decaying E-greedy"]},{"cell_type":"code","metadata":{"id":"IQcPFCcQHQk3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":620},"executionInfo":{"status":"ok","timestamp":1592730596172,"user_tz":-540,"elapsed":4328,"user":{"displayName":"Oh Seungmin","photoUrl":"","userId":"06067197057512142134"}},"outputId":"f1091eb3-cac1-410d-fe4b-bb27baaa7bd6"},"source":["import gym\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from gym.envs.registration import register\n","\n","register(\n","    id='FrozenLake-v3',\n","    entry_point='gym.envs.toy_text:FrozenLakeEnv',\n","    kwargs={'map_name' : '4x4', 'is_slippery': False}\n",")\n","env = gym.make('FrozenLake-v3')\n","\n","Q = np.zeros([env.observation_space.n, env.action_space.n])\n","dis = .99\n","num_episodes = 2000\n","\n","rewardList = []\n","for i in range(num_episodes):\n","    state = env.reset()\n","    rAll = 0\n","    done = False\n","\n","    e = 1. / ((i // 100) + 1)\n","    \n","    while not done:\n","        if np.random.rand(1) < e:\n","            action = env.action_space.sample()\n","        else:\n","            action = np.argmax(Q[state, :])\n","\n","        new_state, reward, done, _ = env.step(action)\n","\n","        Q[state, action] = reward + dis * np.max(Q[new_state, :])\n","\n","        rAll += reward\n","        state = new_state\n","    rewardList.append(rAll)\n","\n","print(\"Success rate: \" + str(sum(rewardList) / num_episodes))\n","print(\"Final Q-Table Values\")\n","print(\"LEFT DOWN RIGHT UP\")\n","print(Q)\n","plt.bar(range(len(rewardList)), rewardList, color='b', alpha=0.4)\n","plt.show()"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Success rate: 0.807\n","Final Q-Table Values\n","LEFT DOWN RIGHT UP\n","[[0.94148015 0.95099005 0.93206535 0.94148015]\n"," [0.94148015 0.         0.92274469 0.93206535]\n"," [0.93206535 0.         0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.95099005 0.96059601 0.         0.94148015]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.96059601 0.         0.970299   0.95099005]\n"," [0.96059601 0.9801     0.9801     0.        ]\n"," [0.970299   0.99       0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.9801     0.99       0.970299  ]\n"," [0.9801     0.99       1.         0.9801    ]\n"," [0.         0.         0.         0.        ]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAPqUlEQVR4nO3df6zdd13H8efLlmECA4a9kqU/aNFCbNS4eTOX8EMSENpFWxVC2ogMnDQm1EBATcnMJPOvQcSEOMEaFn4EGANFb2JJQZySGDvXwRjrRtldGa51bGVMMEEZ1bd/nG/h9Ozee85pzzl3/fh8JCfn+/18P+f7fd/POefV7/1+7/fbVBWSpAvfj6x2AZKkyTDQJakRBrokNcJAl6RGGOiS1Ii1q7XhdevW1ebNm1dr85J0Qbrjjju+WVVzSy1btUDfvHkzR44cWa3NS9IFKcnXl1vmIRdJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUiKGBnuSmJI8kuXuZ5UnyniSLSe5Kcvnky5QkDTPKHvoHgO0rLN8BbO0ee4H3nn9ZkqRxDQ30qvo88K0VuuwCPlQ9h4FnJbl0UgVKkkYziStF1wMP9s2f6NoeGuyYZC+9vXg2bdo0gU2fuwMHes979/5wfu/eJz4v9ZozBvv3tw+uc/A1g9MrLVuu32B7/7YHf8alfr5R6l1unSvVMmx7g30Gtz3q60YZx0HjLluplnHXOa06V9rG+fwMS30Pxln3+bxu1HWu9LkbdZ2DfUZdNu46B6enYaYnRavqQFXNV9X83NyStyKQJJ2jSQT6SWBj3/yGrk2SNEOTCPQF4HXdX7tcCXy7qp5wuEWSNF1Dj6En+RjwUmBdkhPAHwFPAaiq9wEHgauAReC7wBumVawkaXlDA72q9gxZXsCbJlaRJOmceKWoJDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREjBXqS7UmOJVlMsn+J5ZuS3Jrki0nuSnLV5EuVJK1kaKAnWQPcCOwAtgF7kmwb6PaHwC1VdRmwG/jzSRcqSVrZKHvoVwCLVXW8qh4HbgZ2DfQp4Bnd9DOBf59ciZKkUYwS6OuBB/vmT3Rt/d4BvDbJCeAg8LtLrSjJ3iRHkhw5derUOZQrSVrOpE6K7gE+UFUbgKuADyd5wrqr6kBVzVfV/Nzc3IQ2LUmC0QL9JLCxb35D19bvGuAWgKr6F+BHgXWTKFCSNJpRAv12YGuSLUkuonfSc2Ggz78BLwNI8lP0At1jKpI0Q0MDvapOA/uAQ8C99P6a5WiS65Ps7Lq9DXhjki8BHwNeX1U1raIlSU+0dpROVXWQ3snO/rbr+qbvAV442dIkSePwSlFJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSI0YK9CTbkxxLsphk/zJ9XpPkniRHk3x0smVKkoZZO6xDkjXAjcAvASeA25MsVNU9fX22Am8HXlhVjyX58WkVLEla2ih76FcAi1V1vKoeB24Gdg30eSNwY1U9BlBVj0y2TEnSMKME+nrgwb75E11bv+cDz0/yz0kOJ9k+qQIlSaMZeshljPVsBV4KbAA+n+Rnquo/+jsl2QvsBdi0adOENi1JgtH20E8CG/vmN3Rt/U4AC1X1/ar6GvBVegF/lqo6UFXzVTU/Nzd3rjVLkpYwSqDfDmxNsiXJRcBuYGGgz9/Q2zsnyTp6h2COT7BOSdIQQwO9qk4D+4BDwL3ALVV1NMn1SXZ23Q4Bjya5B7gV+P2qenRaRUuSnmikY+hVdRA4ONB2Xd90AW/tHpKkVeCVopLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1IiRAj3J9iTHkiwm2b9Cv1clqSTzkytRkjSKoYGeZA1wI7AD2AbsSbJtiX4XA28Gbpt0kZKk4UbZQ78CWKyq41X1OHAzsGuJfn8M3AD89wTrkySNaJRAXw882Dd/omv7gSSXAxur6u9WWlGSvUmOJDly6tSpsYuVJC3vvE+KJvkR4N3A24b1raoDVTVfVfNzc3Pnu2lJUp9RAv0ksLFvfkPXdsbFwE8D/5jkAeBKYMETo5I0W6ME+u3A1iRbklwE7AYWziysqm9X1bqq2lxVm4HDwM6qOjKViiVJSxoa6FV1GtgHHALuBW6pqqNJrk+yc9oFSpJGs3aUTlV1EDg40HbdMn1fev5lSZLG5ZWiktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEaMFOhJtic5lmQxyf4llr81yT1J7kryuSTPnXypkqSVDA30JGuAG4EdwDZgT5JtA92+CMxX1c8CnwTeOelCJUkrG2UP/QpgsaqOV9XjwM3Arv4OVXVrVX23mz0MbJhsmZKkYUYJ9PXAg33zJ7q25VwDfHqpBUn2JjmS5MipU6dGr1KSNNRET4omeS0wD7xrqeVVdaCq5qtqfm5ubpKblqT/99aO0OcksLFvfkPXdpYkLweuBX6xqr43mfIkSaMaZQ/9dmBrki1JLgJ2Awv9HZJcBvwFsLOqHpl8mZKkYYYGelWdBvYBh4B7gVuq6miS65Ps7Lq9C3g68IkkdyZZWGZ1kqQpGeWQC1V1EDg40HZd3/TLJ1yXJGlMXikqSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNGCnQk2xPcizJYpL9Syx/apKPd8tvS7J50oVKklY2NNCTrAFuBHYA24A9SbYNdLsGeKyqfhL4U+CGSRcqSVrZKHvoVwCLVXW8qh4HbgZ2DfTZBXywm/4k8LIkmVyZkqRhUlUrd0heDWyvqt/u5n8T+IWq2tfX5+6uz4lu/v6uzzcH1rUX2NvNvgA4do51rwO+ObTX7FnX+J6stVnXeKxrPOdT13Oram6pBWvPvZ7xVdUB4MD5rifJkaqan0BJE2Vd43uy1mZd47Gu8UyrrlEOuZwENvbNb+jaluyTZC3wTODRSRQoSRrNKIF+O7A1yZYkFwG7gYWBPgvA1d30q4F/qGHHciRJEzX0kEtVnU6yDzgErAFuqqqjSa4HjlTVAvB+4MNJFoFv0Qv9aTrvwzZTYl3je7LWZl3jsa7xTKWuoSdFJUkXBq8UlaRGGOiS1IgLLtCH3YZgytvemOTWJPckOZrkzV37O5KcTHJn97iq7zVv72o9luSVU6ztgSRf7rZ/pGt7dpLPJrmve76ka0+S93R13ZXk8inV9IK+MbkzyXeSvGU1xivJTUke6a6ZONM29vgkubrrf1+Sq5fa1gTqeleSr3Tb/lSSZ3Xtm5P8V9+4va/vNT/fvf+LXe3ndWHfMnWN/b5N+vu6TF0f76vpgSR3du2zHK/lsmG2n7GqumAe9E7K3g88D7gI+BKwbYbbvxS4vJu+GPgqvdshvAP4vSX6b+tqfCqwpat9zZRqewBYN9D2TmB/N70fuKGbvgr4NBDgSuC2Gb133wCeuxrjBbwEuBy4+1zHB3g2cLx7vqSbvmQKdb0CWNtN39BX1+b+fgPr+deu1nS175hCXWO9b9P4vi5V18DyPwGuW4XxWi4bZvoZu9D20Ee5DcHUVNVDVfWFbvo/gXuB9Su8ZBdwc1V9r6q+BizS+xlmpf+WDB8EfrWv/UPVcxh4VpJLp1zLy4D7q+rrK/SZ2nhV1efp/QXW4PbGGZ9XAp+tqm9V1WPAZ4Htk66rqj5TVae72cP0rv1YVlfbM6rqcPVS4UN9P8vE6lrBcu/bxL+vK9XV7WW/BvjYSuuY0ngtlw0z/YxdaIG+Hniwb/4EKwfq1KR3R8nLgNu6pn3dr043nfm1itnWW8BnktyR3i0WAJ5TVQ91098AnrMKdZ2xm7O/aKs9XjD++KzGuP0WvT25M7Yk+WKSf0ry4q5tfVfLLOoa532b9Xi9GHi4qu7ra5v5eA1kw0w/YxdaoD8pJHk68FfAW6rqO8B7gZ8Afg54iN6vfbP2oqq6nN5dMd+U5CX9C7s9kVX5G9X0LkjbCXyia3oyjNdZVnN8lpPkWuA08JGu6SFgU1VdBrwV+GiSZ8ywpCfd+zZgD2fvNMx8vJbIhh+YxWfsQgv0UW5DMFVJnkLvDftIVf01QFU9XFX/U1X/C/wlPzxMMLN6q+pk9/wI8KmuhofPHErpnh+ZdV2dHcAXqurhrsZVH6/OuOMzs/qSvB74ZeA3uiCgO6TxaDd9B73j08/vaug/LDOVus7hfZvleK0Ffh34eF+9Mx2vpbKBGX/GLrRAH+U2BFPTHaN7P3BvVb27r73/+POvAWfOwC8Au9P7D0C2AFvpnYyZdF1PS3LxmWl6J9Xu5uxbMlwN/G1fXa/rzrRfCXy779fCaThrz2m1x6vPuONzCHhFkku6ww2v6NomKsl24A+AnVX13b72ufT+fwKSPI/e+BzvavtOkiu7z+jr+n6WSdY17vs2y+/ry4GvVHfH167emY3XctnArD9j53NmdzUe9M4Of5Xev7bXznjbL6L3K9NdwJ3d4yrgw8CXu/YF4NK+11zb1XqM8zyTvkJdz6P3FwRfAo6eGRfgx4DPAfcBfw88u2sPvf+05P6u7vkpjtnT6N2o7Zl9bTMfL3r/oDwEfJ/ecclrzmV86B3TXuweb5hSXYv0jqOe+Yy9r+v7qu79vRP4AvArfeuZpxew9wN/RncV+ITrGvt9m/T3dam6uvYPAL8z0HeW47VcNsz0M+al/5LUiAvtkIskaRkGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWrE/wEiGEgYQA8D8gAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"lG4OYrDHJ14y","colab_type":"text"},"source":["# decaying add random noise"]},{"cell_type":"code","metadata":{"id":"4dUXj5xAJLCP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":620},"executionInfo":{"status":"ok","timestamp":1592730757498,"user_tz":-540,"elapsed":4043,"user":{"displayName":"Oh Seungmin","photoUrl":"","userId":"06067197057512142134"}},"outputId":"9a4e6fd2-20ee-44bd-9187-15a2a39e8ca8"},"source":["import gym\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from gym.envs.registration import register\n","\n","register(\n","    id='FrozenLake-v4',\n","    entry_point='gym.envs.toy_text:FrozenLakeEnv',\n","    kwargs={'map_name' : '4x4', 'is_slippery': False}\n",")\n","env = gym.make('FrozenLake-v4')\n","\n","Q = np.zeros([env.observation_space.n, env.action_space.n])\n","dis = .99\n","num_episodes = 2000\n","\n","rewardList = []\n","for i in range(num_episodes):\n","    state = env.reset()\n","    rAll = 0\n","    done = False\n","\n","    while not done:\n","        action = np.argmax(Q[state, :] + np.random.randn(1, env.action_space.n) / (i + 1))\n","\n","        new_state, reward, done, _ = env.step(action)\n","\n","        Q[state, action] = reward + dis * np.max(Q[new_state, :])\n","\n","        rAll += reward\n","        state = new_state\n","    rewardList.append(rAll)\n","\n","print(\"Success rate: \" + str(sum(rewardList) / num_episodes))\n","print(\"Final Q-Table Values\")\n","print(\"LEFT DOWN RIGHT UP\")\n","print(Q)\n","plt.bar(range(len(rewardList)), rewardList, color='b', alpha=0.4)\n","plt.show()"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Success rate: 0.955\n","Final Q-Table Values\n","LEFT DOWN RIGHT UP\n","[[0.         0.95099005 0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.96059601 0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.970299   0.        ]\n"," [0.         0.9801     0.         0.        ]\n"," [0.         0.99       0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.         0.        ]\n"," [0.         0.         0.99       0.        ]\n"," [0.         0.         1.         0.        ]\n"," [0.         0.         0.         0.        ]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}