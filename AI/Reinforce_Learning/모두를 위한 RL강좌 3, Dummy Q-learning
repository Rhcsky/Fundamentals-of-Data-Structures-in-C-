{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"모두를 위한 RL강좌 3, Dummy Q-learning","provenance":[],"authorship_tag":"ABX9TyOc45q13nIcEcS/55nndbXg"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"b2C7LcEq38yU","colab_type":"text"},"source":["# Q Learning\n","\n","input : state, action\n","output : quality(reward)\n","\n","> Example <Q(state,action)><br>\n","Q(s1,LEFT) : 0<br>\n","Q(s1,RIGHT) : 0.5<br>\n","Q(s1,UP) : 0<br>\n","Q(s1,DOWN) : 0.3<br>"]},{"cell_type":"code","metadata":{"id":"EdCk2DBk3DWL","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592728400915,"user_tz":-540,"elapsed":988,"user":{"displayName":"Oh Seungmin","photoUrl":"","userId":"06067197057512142134"}}},"source":["import gym\n","from gym.envs.registration import register\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import random as pr\n","\n","def rargmax(vector):\n","  m = np.amax(vector)\n","  indices = np.nonzero(vector == m)[0]\n","  return pr.choice(indices)\n","\n","register(\n","    id='FrozenLake-v3',\n","    entry_point='gym.envs.toy_text:FrozenLakeEnv',\n","    kwargs={'map_name':'4x4','is_slippery':False}\n",")\n","\n","env = gym.make('FrozenLake-v3')\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"sDpsog0r9GPl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":639},"executionInfo":{"status":"ok","timestamp":1592728408582,"user_tz":-540,"elapsed":4830,"user":{"displayName":"Oh Seungmin","photoUrl":"","userId":"06067197057512142134"}},"outputId":"47fcb15f-d191-4fe0-8cd1-a94f644a8861"},"source":["Q = np.zeros([env.observation_space.n, env.action_space.n]) #16x4\n","\n","num_episodes = 2000\n","\n","rewardList = []\n","\n","for i in range(num_episodes):\n","  state = env.reset()\n","  rAll = 0\n","  done = False\n","\n","  while not done:\n","    action = rargmax(Q[state,:])\n","\n","    new_state, reward, done, _ = env.step(action)\n","\n","    Q[state,action] = reward + np.max(Q[new_state,:])\n","\n","    rAll += reward\n","\n","    state = new_state\n","\n","  rewardList.append(rAll)\n","\n","\n","print(f\"Success Rate: {(sum(rewardList)/num_episodes)}\")\n","print(\"Final Q-Table Values\")\n","print(\"LEFT DOWN RIGHT UP\")\n","print(Q)\n","\n","plt.bar(range(len(rewardList)),rewardList, color='blue')\n","plt.show"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Success Rate: 0.9755\n","Final Q-Table Values\n","LEFT DOWN RIGHT UP\n","[[0. 1. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 1. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 1. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 1. 0.]\n"," [0. 0. 1. 0.]\n"," [0. 1. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 1. 0.]\n"," [0. 0. 0. 0.]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show>"]},"metadata":{"tags":[]},"execution_count":2},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}